---
import Layout from "@/layouts/Layout.astro";
import type { Action } from "@/types";
import { getActions } from "@/utils/queries/actions";
import { Image } from "astro:assets";
import { slide } from "astro:transitions";

export const prerender = true;

export async function getStaticPaths() {
  const job = [
    "pld",
    "war",
    "drk",
    "gnb",
    "whm",
    "sch",
    "ast",
    "sge",
    "mnk",
    "drg",
    "nin",
    "sam",
    "rpr",
    "vpr",
    "brd",
    "mch",
    "dnc",
    "blm",
    "smn",
    "rdm",
    "pct",
  ];

  return job.map((job) => ({
    params: { job },
  }));
}

const { job } = Astro.params;

// Get initial data using the query function
const formattedData = await getActions(job);
const initialItems = formattedData.results as Action[];
const initialCursor = formattedData.next;
---

<Layout>
  <infinite-actions-list data-job={job} data-initial-cursor={initialCursor}>
    <div id="container" class="flex w-full flex-col gap-4">
      {
        initialItems.map((item) => (
          <div
            transition:animate={slide({
              duration: `${Math.floor(Math.random() * (500 - 100 + 1)) + 100}ms`,
            })}
            class="flex flex-row gap-2 rounded-lg border-2 border-zinc-200 bg-zinc-100 p-4 dark:border-zinc-800 dark:bg-zinc-900"
          >
            <Image
              src={item.icon}
              alt={item.name}
              width={40}
              height={40}
              loading="lazy"
              class="h-10 w-10 rounded-lg"
            />
            <div class="flex flex-col gap-2">
              <h3>{item.name}</h3>
              <p
                class="hue-rotate-90 saturate-200 dark:hue-rotate-0 dark:saturate-100"
                set:html={item.description}
              />
            </div>
          </div>
        ))
      }
      <div id="loading" class="hidden py-4 text-center">
        <div
          class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-zinc-200 border-t-cyan-600"
        >
        </div>
        <p class="mt-2 text-zinc-200 dark:text-zinc-800">
          Loading more actions...
        </p>
      </div>
      <div id="error" class="hidden"></div>
      <div id="loader"></div>
    </div>
  </infinite-actions-list>

  <script>
    import type { Action } from "@/types";

    class InfiniteActionsList extends HTMLElement {
      private items: Action[];
      private cursor: number | null;
      private loading: boolean;
      private error: string | null;
      private loaderObserver: IntersectionObserver;

      constructor() {
        super();
        this.items = [];
        this.cursor = Number(this.dataset.initialCursor) || null;
        this.loading = false;
        this.error = null;

        this.loaderObserver = new IntersectionObserver(
          (entries) => {
            if (
              entries[0].isIntersecting &&
              !this.loading &&
              this.cursor !== null
            ) {
              this.fetchData();
            }
          },
          { threshold: 1.0 },
        );
      }

      connectedCallback(): void {
        const loader = this.querySelector("#loader");
        if (loader) {
          this.loaderObserver.observe(loader);
        }
      }

      disconnectedCallback(): void {
        this.loaderObserver.disconnect();
      }

      private async fetchData(): Promise<void> {
        if (this.loading) return;

        const loadingElement = this.querySelector("#loading");
        if (!loadingElement) return;

        this.loading = true;
        loadingElement.classList.remove("hidden");

        try {
          const job = this.dataset.job;
          if (!job) throw new Error("Action job not specified");

          const response = await fetch(
            `/api/actions/${job}?page=${this.cursor}`,
          );
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const formattedData = await response.json();
          this.items = [...this.items, ...formattedData.results];
          this.cursor = formattedData.next ?? null;

          this.renderItems(formattedData.results);
        } catch (err) {
          const errorElement = this.querySelector("#error");
          if (errorElement) {
            this.error = "An error occurred while fetching data";
            errorElement.textContent = this.error;
            errorElement.classList.remove("hidden");
          }
          console.error(err);
        } finally {
          this.loading = false;
          loadingElement.classList.add("hidden");
        }
      }

      private renderItems(newItems: Action[]): void {
        const container = this.querySelector("#container");
        if (!container) return;

        newItems.forEach((item) => {
          const itemElement = document.createElement("div");

          itemElement.className =
            "flex flex-row gap-2 rounded-lg border-2 border-zinc-200 dark:border-zinc-800 bg-zinc-100 p-4 dark:bg-zinc-900";

          itemElement.innerHTML = `
            <img
              src="${item.icon}"
              srcset="${item.iconSrcset || ""}"
              alt="${item.name}"
              width="${item.iconAttributes!.width}"
              height="${item.iconAttributes!.height}"
              loading="${item.iconAttributes!.loading}"
              decoding="${item.iconAttributes!.decoding}"
              class="h-10 w-10 rounded-lg"
              onerror="this.src='/fallback-image.jpg'"
            />
            <div class="flex flex-col gap-2">
              <h3>${item.name}</h3>
              <p class="hue-rotate-90 saturate-200 dark:hue-rotate-0 dark:saturate-100">${item.description}</p>
            </div>
          `;

          container.insertBefore(itemElement, container.lastElementChild);
        });
      }
    }

    customElements.define("infinite-actions-list", InfiniteActionsList);
  </script>
</Layout>
