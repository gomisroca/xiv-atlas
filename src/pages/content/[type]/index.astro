---
import Layout from "@/layouts/Layout.astro";
import { getContent } from "@/utils/queries/content";
import { Image } from "astro:assets";
import { getBanner, getDescription, getIcon } from "./getters";

export const prerender = true;

export async function getStaticPaths() {
  const types = [
    "achievements",
    "other_items",
    "head_items",
    "arr_quests",
    "hw_quests",
    "sb_quests",
    "shb_quests",
    "ew_quests",
    "dt_quests",
    "dungeons",
    "raids",
    "trials",
  ] as const;

  return types.map((type) => ({
    params: { type },
  }));
}

const { type } = Astro.params;

// Get initial data using the query function
const formattedData = await getContent(type);
const initialItems = formattedData.results;
const initialCursor = formattedData.next;
---

<Layout>
  <infinite-content-list data-type={type} data-initial-cursor={initialCursor}>
    <div class="flex flex-col gap-4">
      {
        initialItems.map((item) => (
          <div class="flex flex-col gap-2 rounded-lg border-2 border-zinc-200 bg-zinc-100 p-4 dark:border-zinc-800 dark:bg-zinc-900">
            {getBanner(item) && (
              <Image
                src={getBanner(item)!}
                alt={item.name}
                width={200}
                height={65}
                loading="lazy"
                class="w-full rounded-lg"
              />
            )}
            <div class="flex flex-row gap-2">
              {getIcon(item) && (
                <Image
                  src={getIcon(item)!}
                  alt={item.name}
                  width={64}
                  height={64}
                  loading="lazy"
                  class="h-16 w-16 rounded-lg"
                />
              )}
              <div class="flex flex-col gap-2">
                <h3>{item.name}</h3>
                {getDescription(item) && <p>{getDescription(item)}</p>}
              </div>
            </div>
          </div>
        ))
      }
      <div class="loading hidden py-4 text-center">
        <div
          class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-zinc-200 border-t-cyan-600"
        >
        </div>
        <p class="mt-2 text-zinc-200 dark:text-zinc-800">
          Loading more content...
        </p>
      </div>
      <div class="error hidden"></div>
      <div class="loader"></div>
    </div>
  </infinite-content-list>

  <script>
    import type { FormattedContent, FormattedAPIResponse } from "@/types";
    import { getBanner, getDescription, getIcon } from "./getters";

    class InfiniteContentList extends HTMLElement {
      private items: FormattedContent[];
      private cursor: string | null;
      private loading: boolean;
      private error: string | null;
      private loaderObserver: IntersectionObserver;

      constructor() {
        super();
        this.items = [];
        this.cursor = this.dataset.initialCursor || null;
        this.loading = false;
        this.error = null;

        this.loaderObserver = new IntersectionObserver(
          (entries) => {
            if (
              entries[0].isIntersecting &&
              !this.loading &&
              this.cursor !== null
            ) {
              this.fetchData();
            }
          },
          { threshold: 1.0 },
        );
      }

      connectedCallback(): void {
        const loader = this.querySelector(".loader");
        if (loader) {
          this.loaderObserver.observe(loader);
        }
      }

      disconnectedCallback(): void {
        this.loaderObserver.disconnect();
      }

      private async fetchData(): Promise<void> {
        if (this.loading) return;

        const loadingElement = this.querySelector(".loading");
        if (!loadingElement) return;

        this.loading = true;
        loadingElement.classList.remove("hidden");

        try {
          const type = this.dataset.type;
          if (!type) throw new Error("Content type not specified");

          const response = await fetch(
            `/api/content/${type}?cursor=${this.cursor}`,
          );
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const formattedData: FormattedAPIResponse = await response.json();
          this.items = [...this.items, ...formattedData.results];
          this.cursor = formattedData.next ?? null;

          this.renderItems(formattedData.results);
        } catch (err) {
          const errorElement = this.querySelector(".error");
          if (errorElement) {
            this.error = "An error occurred while fetching data";
            errorElement.textContent = this.error;
            errorElement.classList.remove("hidden");
          }
          console.error(err);
        } finally {
          this.loading = false;
          loadingElement.classList.add("hidden");
        }
      }

      private renderItems(newItems: FormattedContent[]): void {
        const container = this.querySelector(".flex-col");
        if (!container) return;

        newItems.forEach((item) => {
          const itemElement = document.createElement("div");
          itemElement.className =
            "flex flex-col gap-2 rounded-lg border-2 border-zinc-200 bg-zinc-100 p-4 dark:border-zinc-800 dark:bg-zinc-900";

          const bannerSrc = getBanner(item);
          const iconSrc = getIcon(item);
          const description = getDescription(item);

          const bannerHtml = bannerSrc
            ? `<img
                src="${bannerSrc}"
                srcset="${item.bannerSrcset || ""}"
                alt="${item.name}"
                width="${item.bannerAttributes!.width}"
                height="${item.bannerAttributes!.height}"
                loading="${item.bannerAttributes!.loading}"
                decoding="${item.bannerAttributes!.decoding}"
                class="w-full rounded-lg"
                onerror="this.src='/fallback-image.jpg'"
              />`
            : "";

          const iconHtml = iconSrc
            ? `<img
                src="${iconSrc}"
                srcset="${item.iconSrcset || ""}"
                alt="${item.name}"
                width="${item.iconAttributes!.width}"
                height="${item.iconAttributes!.height}"
                loading="${item.iconAttributes!.loading}"
                decoding="${item.iconAttributes!.decoding}"
                class="h-16 w-16 rounded-lg"
                onerror="this.src='/fallback-image.jpg'"
              />`
            : "";

          const descriptionHtml = description
            ? `<p class="hue-rotate-90 saturate-200 dark:hue-rotate-0 dark:saturate-100">${description}</p>`
            : "";

          itemElement.innerHTML = `
            ${bannerHtml}
            <div class="flex flex-row gap-2">
              ${iconHtml}
              <div class="flex flex-col gap-2">
                <h3>${item.name}</h3>
                ${descriptionHtml}
              </div>
            </div>
          `;
          container.insertBefore(itemElement, container.lastElementChild);
        });
      }
    }

    customElements.define("infinite-content-list", InfiniteContentList);
  </script>
</Layout>
