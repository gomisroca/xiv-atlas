---
import Layout from "@/layouts/Layout.astro";
import { getContent } from "@/utils/queries/content";
import { Image } from "astro:assets";
import {
  getAchievementUtils,
  getBanner,
  getDescription,
  getIcon,
  getInstanceUtils,
  getItemUtils,
  getQuestUtils,
} from "./getters";
import { slide } from "astro:transitions";

export const prerender = true;

export async function getStaticPaths() {
  const types = [
    "achievements",
    "other_items",
    "head_items",
    "pld_items",
    "war_items",
    "drk_items",
    "gnb_items",
    "whm_items",
    "sch_items",
    "ast_items",
    "sge_items",
    "mnk_items",
    "drg_items",
    "nin_items",
    "sam_items",
    "rpr_items",
    "vpr_items",
    "brd_items",
    "mch_items",
    "dnc_items",
    "blm_items",
    "smn_items",
    "rdm_items",
    "pct_items",
    "arr_quests",
    "hw_quests",
    "sb_quests",
    "shb_quests",
    "ew_quests",
    "dt_quests",
    "dungeons",
    "raids",
    "trials",
  ] as const;

  return types.map((type) => ({
    params: { type },
  }));
}

const { type } = Astro.params;

// Get initial data using the query function
const formattedData = await getContent(type);
const initialItems = formattedData.results;
const initialCursor = formattedData.next;
---

<Layout>
  <infinite-content-list data-type={type} data-initial-cursor={initialCursor}>
    <div id="container" class="flex flex-col gap-4 w-full">
      {
        initialItems.map((item) => (
          <div 
            transition:animate={slide({ 
              duration: `${Math.floor(Math.random() * (500 - 100 + 1)) + 100}ms` 
            })}
            class="flex flex-col gap-2 rounded-lg border-2 border-zinc-200 bg-zinc-100 p-4 dark:border-zinc-800 dark:bg-zinc-900">
            {getBanner(item) && (
              <Image
                src={getBanner(item)!}
                alt={item.name}
                width={375}
                height={120}
                loading="lazy"
                class="w-[375px] rounded-lg"
              />
            )}
            <div class="flex flex-row gap-2">
              {getIcon(item) && (
                <Image
                  src={getIcon(item)!}
                  alt={item.name}
                  width={40}
                  height={40}
                  loading="lazy"
                  class="h-10 w-10 rounded-lg"
                />
              )}
              <div class="flex flex-col gap-2">
                {getItemUtils(item)?.rarity ?
                (
                  <h3 
                  class={
                    getItemUtils(item)!.rarity === 4 ? "text-purple-500" 
                  : getItemUtils(item)!.rarity === 3 ? "text-blue-500" 
                  : getItemUtils(item)!.rarity === 2 ? "text-green-500" 
                  : ""}>{item.name}</h3>
                )
                : 
                (
                  <h3>{item.name}</h3>
                )}
                {getDescription(item) && <p>{getDescription(item)}</p>}
                {getQuestUtils(item) && (
                  <div class="flex flex-row gap-2">
                    <p class="text-sm">{getQuestUtils(item)!.location}</p>
                    <p class="text-sm">{getQuestUtils(item)!.npc}</p>
                  </div>
                )}
                {getInstanceUtils(item) && (
                  <div class="flex flex-col gap-2">
                    {getInstanceUtils(item)!.levelRequired && (
                      <p>
                        Level Required: {getInstanceUtils(item)!.levelRequired}
                      </p>
                    )}
                    {getInstanceUtils(item)!.levelSync && (
                      <p>
                        Level Sync: {getInstanceUtils(item)!.levelSync}
                      </p>
                    )}
                  </div>
                )}
                {getItemUtils(item) && (
                  <div class="flex flex-col gap-2">
                    <p class="text-sm gap-4 flex flex-row">
                      <span>HQ {getItemUtils(item)!.hq ? "✔" : "✖"} </span>
                      <span>Unique {getItemUtils(item)!.unique ? "✔" : "✖"} </span>
                      <span>Glamour {getItemUtils(item)!.glamour ? "✔" : "✖"} </span>
                    </p>
                      {getItemUtils(item)!.itemLevel && (
                        <p class="text-sm">
                          Item Level: {getItemUtils(item)!.itemLevel}
                        </p>
                      )}
                      {getItemUtils(item)!.equipLevel && (
                        <p class="text-sm">
                          Equip Level: {getItemUtils(item)!.equipLevel}
                        </p>
                      )}
                      {getItemUtils(item)!.materiaSlotCount > 0 &&(
                        <p class="text-sm">
                          Materia Slots: {getItemUtils(item)!.materiaSlotCount}
                        </p>
                      )}
                  </div>
                )}
                {getAchievementUtils(item) && (
                  <div class="flex flex-row gap-2">
                    <p class="text-sm">
                      {getAchievementUtils(item)!.category}
                      {getAchievementUtils(item)!.title.masculine && (
                        <span>
                          {getAchievementUtils(item)!.title.masculine}
                        </span>
                        <span>-</span>
                        <span>
                          {getAchievementUtils(item)!.title.feminine}
                        </span>
                      )}
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))
      }
      <div id="loading" class="hidden py-4 text-center">
        <div
          class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-zinc-200 border-t-cyan-600"
        >
        </div>
        <p class="mt-2 text-zinc-200 dark:text-zinc-800">
          Loading more content...
        </p>
      </div>
      <div id="error" class="hidden"></div>
      <div id="loader"></div>
    </div>
  </infinite-content-list>

  <script>
    import type { FormattedContent, FormattedAPIResponse } from "@/types";
    import {
      getBanner,
      getDescription,
      getIcon,
      getQuestUtils,
      getInstanceUtils,
      getItemUtils,
      getAchievementUtils,
    } from "./getters";

    class InfiniteContentList extends HTMLElement {
      private items: FormattedContent[];
      private cursor: number | null;
      private loading: boolean;
      private error: string | null;
      private loaderObserver: IntersectionObserver;

      constructor() {
        super();
        this.items = [];
        this.cursor = Number(this.dataset.initialCursor) || null;
        this.loading = false;
        this.error = null;

        this.loaderObserver = new IntersectionObserver(
          (entries) => {
            if (
              entries[0].isIntersecting &&
              !this.loading &&
              this.cursor !== null
            ) {
              this.fetchData();
            }
          },
          { threshold: 1.0 },
        );
      }

      connectedCallback(): void {
        const loader = this.querySelector("#loader");
        if (loader) {
          this.loaderObserver.observe(loader);
        }
      }

      disconnectedCallback(): void {
        this.loaderObserver.disconnect();
      }

      private async fetchData(): Promise<void> {
        if (this.loading) return;

        const loadingElement = this.querySelector("#loading");
        if (!loadingElement) return;

        this.loading = true;
        loadingElement.classList.remove("hidden");

        try {
          const type = this.dataset.type;
          if (!type) throw new Error("Content type not specified");

          const response = await fetch(
            `/api/content/${type}?page=${this.cursor}`,
          );
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const formattedData: FormattedAPIResponse = await response.json();
          this.items = [...this.items, ...formattedData.results];
          this.cursor = formattedData.next ?? null;

          this.renderItems(formattedData.results);
        } catch (err) {
          const errorElement = this.querySelector("#error");
          if (errorElement) {
            this.error = "An error occurred while fetching data";
            errorElement.textContent = this.error;
            errorElement.classList.remove("hidden");
          }
          console.error(err);
        } finally {
          this.loading = false;
          loadingElement.classList.add("hidden");
        }
      }

      private renderItems(newItems: FormattedContent[]): void {
        const container = this.querySelector("#container");
        if (!container) return;

        newItems.forEach((item) => {
          const itemElement = document.createElement("div");
          itemElement.className =
            "flex flex-col gap-2 rounded-lg border-2 border-zinc-200 bg-zinc-100 p-4 dark:border-zinc-800 dark:bg-zinc-900";

          const bannerSrc = getBanner(item);
          const iconSrc = getIcon(item);
          const description = getDescription(item);
          const questUtils = getQuestUtils(item);
          const instanceUtils = getInstanceUtils(item);
          const itemUtils = getItemUtils(item);
          const achievementUtils = getAchievementUtils(item);
          
          const bannerHtml = bannerSrc
            ? `<img
                src="${bannerSrc}"
                srcset="${item.bannerSrcset || ""}"
                alt="${item.name}"
                width="${item.bannerAttributes!.width}"
                height="${item.bannerAttributes!.height}"
                loading="${item.bannerAttributes!.loading}"
                decoding="${item.bannerAttributes!.decoding}"
                class="w-full rounded-lg"
                onerror="this.src='/fallback-image.jpg'"
              />`
            : "";

          const iconHtml = iconSrc
            ? `<img
                src="${iconSrc}"
                srcset="${item.iconSrcset || ""}"
                alt="${item.name}"
                width="${item.iconAttributes!.width}"
                height="${item.iconAttributes!.height}"
                loading="${item.iconAttributes!.loading}"
                decoding="${item.iconAttributes!.decoding}"
                class="h-10 w-10 rounded-lg"
                onerror="this.src='/fallback-image.jpg'"
              />`
            : "";

          const descriptionHtml = description
            ? `<p class="hue-rotate-90 saturate-200 dark:hue-rotate-0 dark:saturate-100">${description}</p>`
            : "";

          const questUtilsHtml = questUtils
            ? `<div class="flex flex-row gap-2">
                <p class="text-sm">
                  ${questUtils.location}
                </p>
                <p class="text-sm">
                  ${questUtils.npc}
                </p>
              </div>`
            : "";

          const instanceUtilsHtml = instanceUtils
            ? `<div class="flex flex-row gap-2">
                <p class="text-sm">
                  ${instanceUtils.levelRequired}
                  ${instanceUtils.levelSync}
                </p>
              </div>`
            : "";

          const itemUtilsHtml = itemUtils
            ? `<div class="flex flex-col gap-2">
                    <p class="text-sm gap-4 flex flex-row">
                      <span>HQ ${itemUtils.hq ? "✔" : "✖"} </span>
                      <span>Unique ${itemUtils.unique ? "✔" : "✖"} </span>
                      <span>Glamour ${itemUtils.glamour ? "✔" : "✖"} </span>
                    </p>
                    ${itemUtils.itemLevel ? 
                    `<p class="text-sm">
                      Item Level: ${itemUtils.itemLevel}
                    </p>` : ''}
                      ${itemUtils.equipLevel ? 
                    `<p class="text-sm">
                      Equip Level: ${itemUtils.equipLevel}
                    </p>` : ''}
                      ${itemUtils.materiaSlotCount > 0  ? 
                      `<p class="text-sm">
                      Materia Slots: ${getItemUtils(item)!.materiaSlotCount}
                    </p>` : ''}
                  </div>`
            : "";

          const achievementUtilsHtml = achievementUtils?.title.masculine
            ? `<div class="flex flex-row gap-2">
                <p class="text-sm">
                  ${achievementUtils.category}
                  <span>
                    ${achievementUtils.title.masculine}
                  </span>
                  <span>-</span>
                  <span>
                    ${achievementUtils.title.feminine}
                  </span>
                </p>
              </div>`
            : achievementUtils ?
            `<div class="flex flex-row gap-2">
                <p class="text-sm">
                  ${achievementUtils.category}
                </p>
              </div>`
            :"";

          const titleHtml = itemUtils?.rarity ? 
          `<h3 class="${
            itemUtils.rarity === 4 ? "text-purple-500" : 
            itemUtils.rarity === 3 ? "text-blue-500" : 
            itemUtils.rarity === 2 ? "text-green-500"
            : ""
          }">${item.name}</h3>` : 
          `<h3>${item.name}</h3>`;

          itemElement.innerHTML = `
            <div>${bannerHtml}</div>
            <div class="flex flex-row gap-2">
              ${iconHtml}
              <div class="flex flex-col gap-2">
                ${titleHtml}
                ${descriptionHtml}
                ${questUtilsHtml}
                ${instanceUtilsHtml}
                ${itemUtilsHtml}                
                ${achievementUtilsHtml}
              </div>
            </div>
          `;

          container.insertBefore(itemElement, container.lastElementChild);
        });
      }
    }

    customElements.define("infinite-content-list", InfiniteContentList);
  </script>
</Layout>
