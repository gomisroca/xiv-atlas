---
import Layout from "@/layouts/Layout.astro";
import { getAchievements } from "@/utils/queries/achievements";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const firstPage = await getAchievements(1);
  const totalPages = firstPage.pagination.page_total;

  return Array.from({ length: totalPages }, (_, i) => {
    return {
      params: { page: (i + 1).toString() },
    };
  });
}

const { page } = Astro.params;
const currentPage = parseInt(page || "1");
const { results: achievements, pagination } =
  await getAchievements(currentPage);

// Next page URL for infinite scroll
const nextPage = pagination.page_next
  ? `/achievements/${pagination.page_next}`
  : null;
---

<Layout>
  <div
    class="achievement-grid grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3"
  >
    {
      achievements?.map((achievement) => (
        <div class="flex items-center gap-4 rounded-lg border p-4 shadow-sm transition-shadow hover:shadow-md">
          <div class="flex-shrink-0">
            <Image
              src={`https://xivapi.com${achievement.icon}`}
              alt={`${achievement.name} icon`}
              width={40}
              height={40}
              class="rounded"
            />
          </div>
          <div class="flex-grow">
            <h3 class="font-bold">{achievement.name}</h3>
          </div>
        </div>
      ))
    }
  </div>

  {
    nextPage && (
      <div
        id="infinite-scroll-marker"
        data-next-page={nextPage}
        class="py-4 text-center"
      >
        <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-gray-300 border-t-blue-600" />
        <p class="mt-2 text-gray-600">Loading more achievements...</p>
      </div>
    )
  }

  <script>
    let isLoading = false;

    function setupInfiniteScroll() {
      const marker = document.getElementById("infinite-scroll-marker");
      const achievementGrid = document.querySelector(".achievement-grid");

      if (!marker || !achievementGrid) return;

      const observer = new IntersectionObserver(
        async (entries) => {
          if (entries[0].isIntersecting && !isLoading) {
            const nextPage = marker.dataset.nextPage;
            if (!nextPage) return;

            isLoading = true;

            try {
              const response = await fetch(nextPage);
              if (!response.ok) throw new Error("Network response was not ok");

              const text = await response.text();

              const parser = new DOMParser();
              const doc = parser.parseFromString(text, "text/html");

              const newAchievementsContainer =
                doc.querySelector(".achievement-grid");
              const newMarker = doc.getElementById("infinite-scroll-marker");

              if (newAchievementsContainer) {
                achievementGrid.innerHTML += newAchievementsContainer.innerHTML;

                if (newMarker?.dataset.nextPage) {
                  marker.dataset.nextPage = newMarker.dataset.nextPage;
                  observer.observe(marker);

                  // Extract the page number from the next page URL
                  const pageMatch = newMarker.dataset.nextPage.match(
                    /\/achievements\/(\d+)/,
                  );
                  if (pageMatch) {
                    const currentPage = parseInt(pageMatch[1]) - 1; // Subtract 1 since this is the page we just loaded

                    // Update the URL without refreshing the page
                    const newUrl = `/achievements/${currentPage}`;
                    window.history.replaceState(
                      { page: currentPage },
                      "",
                      newUrl,
                    );
                  }
                } else {
                  marker.remove();
                }
              }
            } catch (error) {
              console.error("Error loading more achievements:", error);
              const errorMessage = document.createElement("div");
              errorMessage.className = "text-red-500 text-center mt-4";
              errorMessage.textContent =
                "Failed to load more achievements. Please try again.";
              marker.parentElement?.insertBefore(errorMessage, marker);

              setTimeout(() => {
                const errorEl = document.querySelector(".text-red-500");
                if (errorEl) errorEl.remove();
              }, 3000);
            } finally {
              isLoading = false;
            }
          }
        },
        {
          threshold: 0.1,
        },
      );

      observer.observe(marker);

      // Handle browser back/forward navigation
      window.addEventListener("popstate", (event) => {
        if (event.state?.page) {
          // Optionally reload the page to the correct state
          // or handle the state change in a more sophisticated way
          window.location.reload();
        }
      });
    }

    // Handle scroll position restoration
    function saveScrollPosition() {
      sessionStorage.setItem("scrollPosition", window.scrollY.toString());
    }

    function restoreScrollPosition() {
      const savedPosition = sessionStorage.getItem("scrollPosition");
      if (savedPosition) {
        window.scrollTo(0, parseInt(savedPosition));
        sessionStorage.removeItem("scrollPosition");
      }
    }

    // Initial setup
    setupInfiniteScroll();
    restoreScrollPosition();

    // Setup for view transitions
    document.addEventListener("astro:page-load", () => {
      isLoading = false;
      setupInfiniteScroll();
      restoreScrollPosition();
    });

    // Save scroll position before navigation
    document.addEventListener("astro:before-preparation", saveScrollPosition);
  </script>
</Layout>
